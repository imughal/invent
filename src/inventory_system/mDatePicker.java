/*
 *DatePicker by iMughal.COM ... Imran Ali Mughal ;;;; http://www.iMughal.COM ----
 *OpenSource :)
 * Any Sugestion write up on imran@imughal.com ;;;;;;
 */
package inventory_system;

import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author iMughal
 */
public class mDatePicker extends javax.swing.JDialog {

    int month = Calendar.getInstance().get(Calendar.MONTH);
    int year = Calendar.getInstance().get(Calendar.YEAR);
    public String txtField = "";
    private boolean loaded = false;
    String cMonth = "";
    String day = "";

    /**
     * Creates new form NewOkCancelDialog
     *
     * @param parent
     */

    public mDatePicker(java.awt.Frame parent) {
        super(parent, true);
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose();
            }
        });
        /* Positioning at the point of Mouse Pointer */
        Point location = MouseInfo.getPointerInfo().getLocation();
        setLocation(location);
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */

    public String getDate() {
        setVisible(true);
        return selectedDate;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        newYear = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnPrevMonth = new javax.swing.JButton();
        txtMonth = new javax.swing.JComboBox();
        btnNextMonth = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        closeDP = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tCal = new javax.swing.JTable();

        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.add(jSeparator1);

        newYear.setEditor(new javax.swing.JSpinner.NumberEditor(newYear, "0000"));
        newYear.setMaximumSize(new java.awt.Dimension(110, 20));
        newYear.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                newYearStateChanged(evt);
            }
        });
        jToolBar1.add(newYear);
        jToolBar1.add(jSeparator2);

        btnPrevMonth.setFont(new java.awt.Font("SansSerif", 0, 8)); // NOI18N
        btnPrevMonth.setText("<");
        btnPrevMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevMonthActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPrevMonth);

        txtMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                txtMonthItemStateChanged(evt);
            }
        });
        txtMonth.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtMonthMouseClicked(evt);
            }
        });
        txtMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMonthActionPerformed(evt);
            }
        });
        txtMonth.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtMonthPropertyChange(evt);
            }
        });
        txtMonth.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                txtMonthVetoableChange(evt);
            }
        });
        jToolBar1.add(txtMonth);

        btnNextMonth.setFont(new java.awt.Font("SansSerif", 0, 8)); // NOI18N
        btnNextMonth.setText(">");
        btnNextMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextMonthActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNextMonth);
        jToolBar1.add(jSeparator3);

        closeDP.setText("x");
        closeDP.setFocusable(false);
        closeDP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        closeDP.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        closeDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeDPActionPerformed(evt);
            }
        });
        jToolBar1.add(closeDP);

        jScrollPane1.setBackground(new java.awt.Color(46, 39, 33));

        tCal.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.foreground"));
        tCal.setFont(new java.awt.Font("SansSerif", 1, 10)); // NOI18N
        tCal.setForeground(new java.awt.Color(255, 255, 255));
        tCal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tCal.setAutoscrolls(false);
        tCal.setCellSelectionEnabled(true);
        tCal.setGridColor(java.awt.Color.red);
        tCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tCalMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tCal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose();
    }//GEN-LAST:event_closeDialog
    private void loadCalender() {
        //Table Header's Names
        String[] header = {"SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"};
        //Define the Default Table Model with Header Names & 0 rows.
        DefaultTableModel tModel = new DefaultTableModel(header, 0);
        //Setting the Default Model.
        tCal.setModel(tModel);
        //Setting 2 Dimentional Array for Dates;
        String[][] row = new String[6][7];
        //SimpleDate Format for getting Month in String.
        SimpleDateFormat dMonth = new SimpleDateFormat("MMMM");
        //SimpleDateFormat dYear = new SimpleDateFormat("yyyy");
        //Calendar Instance;
        Calendar cal = Calendar.getInstance();
        cal.set(year, month, 1);
        //Get the Day of Week.
        int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);
        //Get the Total Days in Current Month;
        int daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
        //Array for storing the total dates of the month;
        String[] dates = new String[42];
        //adding the "" value to all sets...
        for (int i = 0; i < dates.length; i++) {
            dates[i] = "";
        }
        //add the dates in the Array according to the day of week and convert in String..
        for (int x = dayOfWeek - 1, day = 1; day <= daysInMonth; x++, day++) {
            dates[x] = Integer.toString(day);
        }
        //Storing the Date in 2 Dimentional Array for the table Model.
        for (int x = 0; x <= dates.length; x++) {
            if (x < 7) {
                row[0][x] = dates[x];
            } else if (x < 14 && x >= 7) {
                row[1][x - 7] = dates[x];
            } else if (x < 21 && x >= 14) {
                row[2][x - 14] = dates[x];
            } else if (x < 28 && x >= 21) {
                row[3][x - 21] = dates[x];
            } else if (x < 35 && x >= 28) {
                row[4][x - 28] = dates[x];
            } else if (x < 42 && x >= 35) {
                row[5][x - 35] = dates[x];
            }
        }
        //Adding the 2 Dimentional Array into Table models rows. 
        for (int x = 0; x < row.length; x++) {
            tModel.addRow(row[x]);
            //Setting default Editor to Null... for Disabling Double Clicking Editable Cells...
            Class<?> col_class = tCal.getColumnClass(x);
            tCal.setDefaultEditor(col_class, null);
            //------//
        }
        tCal.getTableHeader().setFont(new java.awt.Font("SansSerif", 0, 10));
        cMonth = dMonth.format(cal.getTime());
    }
    
    private void newYearStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_newYearStateChanged
       if (loaded) {
            year = (int) newYear.getValue();
            loadCalender();
        }
    }//GEN-LAST:event_newYearStateChanged

    private void btnPrevMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevMonthActionPerformed
        if (month >= 1) {
            month--;
            loadCalender();
            txtMonth.setSelectedItem(cMonth);
        } else if (month == 0) {
            month = 11;
            year--;
            newYear.setValue(year);
            loadCalender();
            txtMonth.setSelectedItem(cMonth);
        }
    }//GEN-LAST:event_btnPrevMonthActionPerformed

    private void btnNextMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextMonthActionPerformed
        if (month <= 10) {
            month++;
            loadCalender();
            txtMonth.setSelectedItem(cMonth);
        } else if (month == 11) {
            month = 0;
            year++;
            newYear.setValue(year);
            loadCalender();
            txtMonth.setSelectedItem(cMonth);
        }
    }//GEN-LAST:event_btnNextMonthActionPerformed

    private void tCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tCalMouseClicked
        if (evt.getClickCount() == 2) {
            int row = tCal.getSelectedRow();
            int col = tCal.getSelectedColumn();
            String cDate = "";
            cDate = tCal.getModel().getValueAt(row, col).toString();
            if (!cDate.equals("")) {
                SimpleDateFormat sDate = new SimpleDateFormat("dd-MMM-yyyy");
                Calendar gCal = Calendar.getInstance();
                gCal.set(year, month, Integer.parseInt(cDate));
                //viewStudent.setingText(txtField, sDate.format(gCal.getTime()));
                selectedDate = sDate.format(gCal.getTime());
                dispose();
            }
        }
    }//GEN-LAST:event_tCalMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        SimpleDateFormat dMonth = new SimpleDateFormat("MMMM");
        Calendar cal = Calendar.getInstance();
        for (int k = 0; k <= 11; k++) {
            cal.set(year, k, 1);
            txtMonth.addItem(dMonth.format(cal.getTime()));
        }
        loadCalender();
        newYear.setValue(year);
        loaded = true;
    }//GEN-LAST:event_formWindowOpened

    private void txtMonthVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_txtMonthVetoableChange

    }//GEN-LAST:event_txtMonthVetoableChange

    private void txtMonthPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtMonthPropertyChange

    }//GEN-LAST:event_txtMonthPropertyChange

    private void txtMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMonthActionPerformed

    }//GEN-LAST:event_txtMonthActionPerformed

    private void txtMonthMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMonthMouseClicked

    }//GEN-LAST:event_txtMonthMouseClicked

    private void txtMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_txtMonthItemStateChanged
        if (loaded) {
            int kMonth = txtMonth.getSelectedIndex();
            month = kMonth;
            loadCalender();
        }

    }//GEN-LAST:event_txtMonthItemStateChanged

    private void closeDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeDPActionPerformed
        doClose();
    }//GEN-LAST:event_closeDPActionPerformed

    private void doClose() {
        selectedDate = "";
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mDatePicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mDatePicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mDatePicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mDatePicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mDatePicker dialog = new mDatePicker(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNextMonth;
    private javax.swing.JButton btnPrevMonth;
    private javax.swing.JButton closeDP;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JSpinner newYear;
    private javax.swing.JTable tCal;
    private javax.swing.JComboBox txtMonth;
    // End of variables declaration//GEN-END:variables

    private String selectedDate = "";
}
